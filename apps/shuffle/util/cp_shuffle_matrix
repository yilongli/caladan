#!/usr/bin/python3

# Copyright (c) 2020 Stanford University
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# This cperf benchmark generates the shuffle matrices with different data
# skewness factors.

from cperf import *

parser = get_parser(description='Generate shuffle matrices.',
        usage='%(prog)s [options]', defaults={})
parser.usage = parser.format_help()
options = parser.parse_args()

init(options)

nodes = range(1, options.num_nodes + 1)
if not options.plot_only:
    command = "%s/%s %s --ifname %s --num-nodes %d --master-addr %s" \
              " --log-file %s" % \
              (options.shuffle_dir, options.shuffle_bin, options.caladan_cfg,
               options.ifname, options.num_nodes, options.master_addr,
               options.log_file)
    try:
        log("Starting nodes with command:\n%s" % command)
        start_nodes(nodes, command)
        cmd_prefix = "gen_workload --avg-msg-size 50000"
        for s in [x * 1e-2 for x in range(70, 300, 10)]:
            do_cmd(cmd_prefix + " --data-dist zipf %.2f --log" % s, nodes)
            # do_cmd("run_bench --protocol udp --udp-port 5002 --policy LRPT --times 20", nodes)

        for s in [x**0.5 for x in reversed([0.1, 0.5, 1, 10, 100, 500, 10000])]:
            do_cmd(cmd_prefix + " --data-dist norm %.2f --log" % s, nodes)
            # do_cmd("run_bench --protocol udp --udp-port 5002 --policy LRPT --times 20", nodes)

        log("Stopping nodes")
        stop_nodes()
    except Exception as e:
        log("Caught exception:\n\t" + str(e))
        log("Cleaning up orphaned '%s' processes" % options.shuffle_bin)
        do_ssh(["pkill", options.shuffle_bin], nodes)

# Parse the log files to extract useful data
# TODO: I don't have data yet