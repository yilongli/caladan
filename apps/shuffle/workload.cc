extern "C" {
#include <base/log.h>
}

#include "workload.h"
#include "cluster.h"

#include <algorithm>
#include <random>
#include <stdexcept>

/**
 * Zipf (Zeta) random distribution.
 *
 * Implementation taken from drobilla's May 24, 2017 answer to
 * https://stackoverflow.com/questions/9983239/how-to-generate-zipf-distributed-numbers-efficiently
 *
 * That code is referenced with this:
 * "Rejection-inversion to generate variates from monotone discrete
 * distributions", Wolfgang Hörmann and Gerhard Derflinger
 * ACM TOMACS 6.3 (1996): 169-184
 *
 * Note that the Hörmann & Derflinger paper, and the stackoverflow
 * code base incorrectly names the paramater as `q`, when they mean `s`.
 * Thier `q` has nothing to do with the q-series. The names in the code
 * below conform to conventions.
 *
 * Example usage:
 *
 *    std::random_device rd;
 *    std::mt19937 gen(rd());
 *    zipf_distribution<> zipf(300);
 *
 *    for (int i = 0; i < 100; i++)
 *        printf("draw %d %d\n", i, zipf(gen));
 */

template<class IntType = unsigned long, class RealType = double>
class zipf_distribution
{
public:
    typedef IntType result_type;

    static_assert(std::numeric_limits<IntType>::is_integer, "");
    static_assert(!std::numeric_limits<RealType>::is_integer, "");

    /// zipf_distribution(N, s, q)
    /// Zipf distribution for `N` items, in the range `[1,N]` inclusive.
    /// The distribution follows the power-law 1/(n+q)^s with exponent
    /// `s` and Hurwicz q-deformation `q`.
    zipf_distribution(const IntType n=std::numeric_limits<IntType>::max(),
            const RealType s=1.0,
            const RealType q=0.0)
            : n(n)
            , _s(s)
            , _q(q)
            , oms(1.0-s)
            , spole(abs(oms) < epsilon)
            , rvs(spole ? 0.0 : 1.0/oms)
            , H_x1(H(1.5) - h(1.0))
            , H_n(H(n + 0.5))
            , cut(1.0 - H_inv(H(1.5) - h(1.0)))
            , dist(H_x1, H_n)
    {
        if (-0.5 >= q)
            throw std::runtime_error("Range error: Parameter q must be greater than -0.5!");
    }
    void reset() {}

    IntType operator()(std::mt19937& rng)
    {
        while (true)
        {
            const RealType u = dist(rng);
            const RealType x = H_inv(u);
            const IntType  k = std::round(x);
            if (k - x <= cut) return k;
            if (u >= H(k + 0.5) - h(k))
                return k;
        }
    }

    /// Returns the parameter the distribution was constructed with.
    RealType s() const { return _s; }
    /// Returns the Hurwicz q-deformation parameter.
    RealType q() const { return _q; }
    /// Returns the minimum value potentially generated by the distribution.
    result_type min() const { return 1; }
    /// Returns the maximum value potentially generated by the distribution.
    result_type max() const { return n; }


private:
    IntType    n;     ///< Number of elements
    RealType   _s;    ///< Exponent
    RealType   _q;    ///< Deformation
    RealType   oms;   ///< 1-s
    bool       spole; ///< true if s near 1.0
    RealType   rvs;   ///< 1/(1-s)
    RealType   H_x1;  ///< H(x_1)
    RealType   H_n;   ///< H(n)
    RealType   cut;   ///< rejection cut
    std::uniform_real_distribution<RealType> dist;  ///< [H(x_1), H(n)]

    // This provides 16 decimal places of precision,
    // i.e. good to (epsilon)^4 / 24 per expanions log, exp below.
    static constexpr RealType epsilon = 2e-5;

    /** (exp(x) - 1) / x */
    static double
    expxm1bx(const double x)
    {
        if (std::abs(x) > epsilon)
            return std::expm1(x) / x;
        return (1.0 + x/2.0 * (1.0 + x/3.0 * (1.0 + x/4.0)));
    }

    /** log(1 + x) / x */
    static RealType
    log1pxbx(const RealType x)
    {
        if (std::abs(x) > epsilon)
            return std::log1p(x) / x;
        return 1.0 - x * ((1/2.0) - x * ((1/3.0) - x * (1/4.0)));
    }
    /**
     * The hat function h(x) = 1/(x+q)^s
     */
    const RealType h(const RealType x)
    {
        return std::pow(x + _q, -_s);
    }

    /**
     * H(x) is an integral of h(x).
     *     H(x) = [(x+q)^(1-s) - (1+q)^(1-s)] / (1-s)
     * and if s==1 then
     *     H(x) = log(x+q) - log(1+q)
     *
     * Note that the numerator is one less than in the paper
     * order to work with all s. Unfortunately, the naive
     * implementation of the above hits numerical underflow
     * when q is larger than 10 or so, so we split into
     * different regimes.
     *
     * When q != 0, we shift back to what the paper defined:

     *    H(x) = (x+q)^{1-s} / (1-s)
     * and for q != 0 and also s==1, use
     *    H(x) = [exp{(1-s) log(x+q)} - 1] / (1-s)
     */
    const RealType H(const RealType x)
    {
        if (not spole)
            return std::pow(x + _q, oms) / oms;

        const RealType log_xpq = std::log(x + _q);
        return log_xpq * expxm1bx(oms * log_xpq);
    }

    /**
     * The inverse function of H(x).
     *    H^{-1}(y) = [(1-s)y + (1+q)^{1-s}]^{1/(1-s)} - q
     * Same convergence issues as above; two regimes.
     *
     * For s far away from 1.0 use the paper version
     *    H^{-1}(y) = -q + (y(1-s))^{1/(1-s)}
     */
    const RealType H_inv(const RealType y)
    {
        if (not spole)
            return std::pow(y * oms, rvs) - _q;

        return std::exp(y * log1pxbx(oms * y)) - _q;
    }
};

/**
 * Generate a shuffle pattern (i.e., message sizes in the shuffle) based on
 * an imaginary MilliSort process.
 *
 * \param rand_seed
 *      Seed value used to generate the input keys; this ensures that we always
 *      generate the same workload on all nodes.
 * \param num_nodes
 *      Number of nodes in the cluster.
 * \param use_zipf
 *      True if the input keys follow a Zipfian distribution; otherwise, a
 *      Gaussian distribution.
 * \param data_skew_factor
 *      Skew factor used to generate the input keys, which controls the skewness
 *      of the message sizes indirectly.
 * \param part_skew_factor
 *      Ratio between the largest partition and the smallest partition.
 * \param skew_input
 *      True means the input partitions will be skewed; false, otherwise.
 * \param skew_output
 *      True means the output partitions will be skewed; false, otherwise.
 * \return
 *      2D double array used to store the (normalized) messages sizes generated
 *      from the MilliSort process (e.g., if the value of m[i][j] is 1.2, then
 *      the message sent from node i to node j will be set to 1.2x of the
 *      average message size).
 */
std::vector<std::vector<double>>
gen_msg_sizes(unsigned rand_seed, int num_nodes, bool use_zipf,
        double data_skew_factor, double part_skew_factor, bool skew_input,
        bool skew_output) {
    std::mt19937 gen(rand_seed);
    // TODO: figure out how input distribution translates to msg distribution?
    // Observation: highly skewed key distribution => data tend to concentrate
    // on diagonal and last few columns in the shuffle matrix (TODO: WHY?)

    // Check out https://en.wikipedia.org/wiki/Normal_distribution for a visual
    // comparison of different stddev's.
    double mean = 100000;
    std::normal_distribution<> norm_dist(mean, data_skew_factor);
    zipf_distribution<> zipf(30000, data_skew_factor);

    std::vector<std::vector<double>> msg_sizes;
    std::vector<std::vector<int>> nodes;
    std::vector<std::tuple<int, int, int>> ext_keys;

    // Compute how far a splitter of the input or output partitions is allowed
    // to move. If the partition skew factor is r (i.e., the largest partition
    // is at most r times as the smallest partition) and the fraction we are
    // allowed to grow/shrink a partition is x, then (1 + 2x)(1 - 2x) = r.
    double offset_ratio = (part_skew_factor - 1) / (2 * part_skew_factor + 2);
    int avg_keys_per_node = num_nodes * 5000;
    int offset_lim = avg_keys_per_node * offset_ratio;

    // Construct input partitions (potentially skewed)
    std::vector<int> num_keys(num_nodes, avg_keys_per_node);
    if (skew_input && (offset_lim > 0)) {
        int offset;
        for (int node_id = 0; node_id < num_nodes - 1; node_id++) {
            offset = avg_keys_per_node - offset_lim + gen() % (offset_lim * 2);
            num_keys[node_id] += offset;
            num_keys[node_id + 1] -= offset;
        }
    }
    for (int node_id = 0; node_id < num_nodes; node_id++) {
        nodes.emplace_back();
        msg_sizes.emplace_back(num_nodes);
        for (int key_idx = 0; key_idx < num_keys[node_id]; key_idx++) {

            int num = use_zipf ? zipf(gen) : std::round(norm_dist(gen));
            nodes[node_id].push_back(num);
            ext_keys.emplace_back(num, node_id, key_idx);
        }
    }

    // Construct output partitions.
    int k = -1;
    std::sort(ext_keys.begin(), ext_keys.end());
    std::vector<decltype(ext_keys)::value_type> splitters;
    for (int i = 0; i < num_nodes; i++) {
        k += avg_keys_per_node;
        int offset = 0;
        if (skew_output && (offset_lim > 0)) {
            offset = avg_keys_per_node - offset_lim + gen() % (offset_lim * 2);
        }
        splitters.emplace_back(ext_keys[k + offset]);
    }

    // Compute the message sizes, normalized w.r.t. the average message size.
    for (size_t src = 0; src < nodes.size(); src++) {
        for (size_t key_idx = 0; key_idx < nodes[src].size(); key_idx++) {
            int dst = 0;
            for (auto& sp : splitters) {
                if (std::tie(nodes[src][key_idx], src, key_idx) > sp) {
                    dst++;
                }
            }
            msg_sizes[src][dst] += 1;
        }

        for (size_t dst = 0; dst < nodes.size(); dst++) {
            msg_sizes[src][dst] /= (avg_keys_per_node / num_nodes);
        }
    }

    // Since highly skewed key distributions tend to produce large message sizes
    // along the main diagonal in the shuffle matrix, reverse each row of the
    // shuffle matrix to avoid generate a shuffle workload where most data on
    // servers stay local during the shuffle.
    for (auto& row : msg_sizes) {
        std::reverse(row.begin(), row.end());
    }

    return msg_sizes;
}

bool
gen_workload_cmd(std::vector<std::string> &words, Cluster &cluster,
        shuffle_op &op)
{
    GenWorkloadOptions opts;
    if (!opts.parse_args(words)) {
        return false;
    }

    auto msg_sizes = gen_msg_sizes(opts.rand_seed, cluster.num_nodes,
            opts.zipf_dist, opts.data_skew_factor, opts.part_skew_factor,
            opts.skew_input, opts.skew_output);

    // Compute the total number of bytes that will be sent and received in the
    // experiment (so we know how much memory to allocate later).
    int local_rank = cluster.local_rank;
    size_t total_tx_bytes = 0;
    size_t total_rx_bytes = 0;
    for (int peer = 0; peer < cluster.num_nodes; peer++) {
        total_tx_bytes += opts.avg_message_size * msg_sizes[local_rank][peer];
        total_rx_bytes += opts.avg_message_size * msg_sizes[peer][local_rank];
    }

    // Reset member variables in the shuffle object.
    op.num_nodes = cluster.num_nodes;
    op.total_tx_bytes = total_tx_bytes;
    op.total_rx_bytes = total_rx_bytes;
    op.tx_data.reset(new char[total_tx_bytes]);
    op.rx_data.reset(new char[total_rx_bytes]);
    op.next_inmsg_addr.store(op.rx_data.get());
    op.use_zipf = opts.zipf_dist;
    op.data_skew = opts.data_skew_factor;
    op.part_skew = opts.part_skew_factor;

    // For debugging.
    memset(op.tx_data.get(), 'a' + cluster.local_rank, op.total_tx_bytes);

    // Set up the outbound messages and initialize the inbound messages.
    op.out_bufs.clear();
    char* start = op.tx_data.get();
    for (int i = 0; i < cluster.num_nodes; i++) {
        size_t len = msg_sizes[local_rank][i] * opts.avg_message_size;
        op.out_bufs.emplace_back(start, len);
        start += len;
    }
    op.in_bufs.clear();
    op.in_bufs.resize(cluster.num_nodes);

    if (opts.print_to_log) {
        std::vector<double> col_max(cluster.num_nodes, -1.0);
        std::vector<double> col_min(cluster.num_nodes, 1e9);

        log_info("shuffle matrix:");
        std::string msg(" Rank:");
        char buf[16] = {};
        for (int i = 0; i < cluster.num_nodes; i++) {
            sprintf(buf, "%6d", i);
            msg.append(buf);
        }
        sprintf(buf, "%6s", "M/m");
        msg.append(buf);
        log_info("%s", msg.c_str());

        for (int i = 0; i < cluster.num_nodes; i++) {
            double row_max = -1.0, row_min = 1e9;
            msg.clear();
            sprintf(buf, "%6d", i);
            msg.append(buf);
            for (int j = 0; j < cluster.num_nodes; j++) {
                double sz = msg_sizes[i][j];
                if (sz < 1e-2) {
                    sprintf(buf, "%6d", 0);
                } else {
                    sprintf(buf, "%6.2f", sz);
                }
                msg.append(buf);
                row_max = std::max(row_max, sz);
                row_min = std::min(row_min, sz);
                col_max[j] = std::max(col_max[j], sz);
                col_min[j] = std::min(col_min[j], sz);
            }
            sprintf(buf, "%6.2f", row_max / row_min);
            msg.append(buf);
            log_info("%s", msg.c_str());
        }

        msg.clear();
        sprintf(buf, "%6s", "M/m");
        msg.append(buf);
        for (int i = 0; i < cluster.num_nodes; i++) {
            sprintf(buf, "%6.2f", col_max[i] / col_min[i]);
            msg.append(buf);
        }
        log_info("%s", msg.c_str());
    }

    log_info("total TX bytes %lu, total RX bytes %lu, avg. message size %lu",
            op.total_tx_bytes, op.total_rx_bytes, opts.avg_message_size);
    std::string msg0("             Rank:");
    std::string msg1("Outbound messages:");
    std::string msg2(" Inbound messages:");
    char buf[16] = {};
    double max_out_r = -1.0, min_out_r = 1e9;
    double max_in_r = -1.0, min_in_r = 1e9;
    for (int i = 0; i < cluster.num_nodes; i++) {
        sprintf(buf, "%6d", i);
        msg0.append(buf);
        sprintf(buf, "%6.2f", msg_sizes[local_rank][i]);
        msg1.append(buf);
        sprintf(buf, "%6.2f", msg_sizes[i][local_rank]);
        msg2.append(buf);
        max_out_r = std::max(max_out_r, msg_sizes[local_rank][i]);
        min_out_r = std::min(min_out_r, msg_sizes[local_rank][i]);
        max_in_r = std::max(max_in_r, msg_sizes[i][local_rank]);
        min_in_r = std::min(min_in_r, msg_sizes[i][local_rank]);
    }
    sprintf(buf, "%8s", "Max/Min");
    msg0.append(buf);
    sprintf(buf, "%8.2f", max_out_r / min_out_r);
    msg1.append(buf);
    sprintf(buf, "%8.2f", max_in_r / min_in_r);
    msg2.append(buf);

    log_info("%s", msg0.c_str());
    log_info("%s", msg1.c_str());
    log_info("%s", msg2.c_str());

    return true;
}